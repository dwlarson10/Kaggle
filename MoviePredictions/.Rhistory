SATAnalysis1600 +
GPATerm +
CreditPerc +
HighSchoolGPA +
TotalBudget + IraeEFC+AdmitType, data=train_rf)
View(train_rf)
df_fr <- as.tibble(df)%>%
select(PIDM,
EnteringCollege,
EnrolledOrGradDrexel.1,
AdmitType,
HighSchoolGPA,
SATAnalysis1600,
EnteringAcYr,
GPATerm,
CreditPerc,
IraeEFC,
TotalBudget)%>%
unique()
df_fr$HighSchoolGPA[is.na(train$HighSchoolGPA)] <- 3.572
df_fr$SATAnalysis1600[is.na(train$SATAnalysis1600)] <- 1285
df_fr$GPATerm[is.na(train$GPATerm)] <- .125
df_fr$CreditPerc[is.na(train$CreditPerc)] <- 0
df_fr$IraeEFC[is.na(train$IraeEFC)] <- 20064
df_fr$TotalBudget[is.na(train$TotalBudget)] <- 70017
require(randomForest)
train_rf <- df_fr%>%filter(EnteringAcYr %in% c('20152016','20162017'))
rf_fit = randomForest(EnrolledOrGradDrexel.1 ~
SATAnalysis1600 +
GPATerm +
CreditPerc +
HighSchoolGPA +
TotalBudget + IraeEFC+AdmitType, data=train_rf)
View(df_fr)
View(train_rf)
df_fr <- as.tibble(df)%>%
select(PIDM,
EnteringCollege,
EnrolledOrGradDrexel.1,
AdmitType,
HighSchoolGPA,
SATAnalysis1600,
EnteringAcYr,
GPATerm,
CreditPerc,
IraeEFC,
TotalBudget)%>%
unique()
df_fr$HighSchoolGPA[is.na(df_fr$HighSchoolGPA)] <- 3.572
df_fr$SATAnalysis1600[is.na(df_fr$SATAnalysis1600)] <- 1285
df_fr$GPATerm[is.na(df_fr$GPATerm)] <- .125
df_fr$CreditPerc[is.na(df_fr$CreditPerc)] <- 0
df_fr$IraeEFC[is.na(df_fr$IraeEFC)] <- 20064
df_fr$TotalBudget[is.na(df_fr$TotalBudget)] <- 70017
require(randomForest)
train_rf <- df_fr%>%filter(EnteringAcYr %in% c('20152016','20162017'))
rf_fit = randomForest(EnrolledOrGradDrexel.1 ~
SATAnalysis1600 +
GPATerm +
CreditPerc +
HighSchoolGPA +
TotalBudget + IraeEFC+AdmitType, data=train_rf)
require(randomForest)
train_rf <- df_fr%>%filter(EnteringAcYr %in% c('20152016','20162017'))
rf_fit = randomForest(EnrolledOrGradDrexel.1 ~
SATAnalysis1600 +
GPATerm +
CreditPerc +
HighSchoolGPA +
TotalBudget + IraeEFC+AdmitType, data=train_rf)
require(randomForest)
train_rf <- df_fr%>%filter(EnteringAcYr %in% c('20152016','20162017'))
rf_fit = randomForest(as.factor(EnrolledOrGradDrexel.1) ~
SATAnalysis1600 +
GPATerm +
CreditPerc +
HighSchoolGPA +
TotalBudget + IraeEFC+AdmitType, data=train_rf)
rf_fit
test_rf <- df_fr%>%filter(EnteringAcYr %in% c('20172018'))
require(caret)
pred = predict(rf_fit), newdata=test_rf,type = "response")
test_rf <- df_fr%>%filter(EnteringAcYr %in% c('20172018'))
require(caret)
pred = predict(rf_fit, newdata=test_rf,type = "response")
test_rf$pred <- pred
#test$pred2 = ifelse(pred > 0.80,1,0)
#draw_confusion_matrix(confusionMatrix(factor(test$pred2),factor(test$EnrolledOrGradDrexel.1)))
View(test_rf)
require(caret)
pred = predict(fit, newdata=test,type = "response")
test$pred <- pred
#test$pred2 = ifelse(pred > 0.80,1,0)
draw_confusion_matrix(confusionMatrix(factor(test$pred),factor(test$EnrolledOrGradDrexel.1)))
test_rf <- df_fr%>%filter(EnteringAcYr %in% c('20172018'))
require(caret)
pred = predict(rf_fit, newdata=test_rf,type = "response")
test_rf$pred <- pred
#test$pred2 = ifelse(pred > 0.80,1,0)
draw_confusion_matrix(confusionMatrix(factor(test_rf$pred),factor(test_rf$EnrolledOrGradDrexel.1)))
require(randomForest)
train_rf <- df_fr%>%filter(EnteringAcYr %in% c('20152016','20162017'))
rf_fit = randomForest(as.factor(EnrolledOrGradDrexel.1) ~
SATAnalysis1600 +
GPATerm +
CreditPerc +
HighSchoolGPA +
TotalBudget + IraeEFC+AdmitType, data=train_rf,mtry=4)
rf_fit
test_rf <- df_fr%>%filter(EnteringAcYr %in% c('20172018'))
require(caret)
pred = predict(rf_fit, newdata=test_rf,type = "response")
test_rf$pred <- pred
#test$pred2 = ifelse(pred > 0.80,1,0)
draw_confusion_matrix(confusionMatrix(factor(test_rf$pred),factor(test_rf$EnrolledOrGradDrexel.1)))
require(randomForest)
train_rf <- df_fr%>%filter(EnteringAcYr %in% c('20152016','20162017'))
rf_fit = randomForest(as.factor(EnrolledOrGradDrexel.1) ~
SATAnalysis1600 +
GPATerm +
CreditPerc +
HighSchoolGPA +
TotalBudget +
IraeEFC+
AdmitType +
EnteringColleg, data=train_rf,mtry=4)
require(randomForest)
train_rf <- df_fr%>%filter(EnteringAcYr %in% c('20152016','20162017'))
rf_fit = randomForest(as.factor(EnrolledOrGradDrexel.1) ~
SATAnalysis1600 +
GPATerm +
CreditPerc +
HighSchoolGPA +
TotalBudget +
IraeEFC+
AdmitType +
EnteringCollege, data=train_rf,mtry=4)
rf_fit
test_rf <- df_fr%>%filter(EnteringAcYr %in% c('20172018'))
require(caret)
pred = predict(rf_fit, newdata=test_rf,type = "response")
test_rf$pred <- pred
#test$pred2 = ifelse(pred > 0.80,1,0)
draw_confusion_matrix(confusionMatrix(factor(test_rf$pred),factor(test_rf$EnrolledOrGradDrexel.1)))
plot(rf_fit)
require(tidyverse)
df <- read_csv("tmdb-box-office-prediction/train.csv")
summary(df)
head(df)
head(df$production_countries)
require(stringi)
genre_matching = "Comedy|Horror|Attion|DramaDoocumentary|Science Fiction|Crime|Fantasy|Thriller|Animation|Adventure|Mystery|War|Romance|Music|Family|Western|History|TV Movie|Foreign"
df <- df%>%mutate(mainGenre = str_extract(genres,genre_matching),
PartOfCollection=stri_extract(belongs_to_collection, regex = "(?<=name\\'\\:\\s\\').+(?=\\'\\,\\s\\'poster)"),
collectionTF = case_when(is.na(PartOfCollection)==TRUE~'No Collection',
T~'Collection'),
castSize = str_count(cast, 'name'),
castFemale = str_count(cast, 'gender\'\\:\\s1'),
castMale = str_count(cast, 'gender\'\\:\\s2'),
crewSize = str_count(crew, 'name'),
crewFemale = str_count(crew, 'gender\'\\:\\s1'),
crewMale = str_count(crew, 'gender\'\\:\\s2'),
percentFemale = castFemale/castSize,
#directorGender = str_count(crew, 'Direction\\,\\gender\'\\:\\s2')
countGenres = str_count(genres,'name'),
prodCompCount = str_count(production_companies,'name'),
prodCountriesCount = str_count((production_countries,'name'))
require(stringi)
genre_matching = "Comedy|Horror|Attion|DramaDoocumentary|Science Fiction|Crime|Fantasy|Thriller|Animation|Adventure|Mystery|War|Romance|Music|Family|Western|History|TV Movie|Foreign"
df <- df%>%mutate(mainGenre = str_extract(genres,genre_matching),
PartOfCollection=stri_extract(belongs_to_collection, regex = "(?<=name\\'\\:\\s\\').+(?=\\'\\,\\s\\'poster)"),
collectionTF = case_when(is.na(PartOfCollection)==TRUE~'No Collection',
T~'Collection'),
castSize = str_count(cast, 'name'),
castFemale = str_count(cast, 'gender\'\\:\\s1'),
castMale = str_count(cast, 'gender\'\\:\\s2'),
crewSize = str_count(crew, 'name'),
crewFemale = str_count(crew, 'gender\'\\:\\s1'),
crewMale = str_count(crew, 'gender\'\\:\\s2'),
percentFemale = castFemale/castSize,
#directorGender = str_count(crew, 'Direction\\,\\gender\'\\:\\s2')
countGenres = str_count(genres,'name'),
prodCompCount = str_count(production_companies,'name'),
prodCountriesCount = str_count(production_countries,'name')
)
df%>%group_by(mainGenre)%>%summarise(count=n(),gross=round(mean(revenue,na.rm=T),0))%>%
ggplot(aes(x=mainGenre,y=count,fill=gross))+
geom_bar(stat='Identity')+coord_flip()
df%>%#filter(collectionTF == 'Collection')%>%
group_by(collectionTF)%>%summarise(gross = mean(revenue),count=n())%>%
ggplot(aes(x=collectionTF,y=gross,fill=count))+
geom_bar(stat='Identity')
with(df,plot(percentFemale,revenue))
names(df)
fml =
fit <- glm(revenue~budget+castSize,data=df)
summary(fit)
liberdate
require(lubridate)
require(stringi)
require(lubridate)
genre_matching = "Comedy|Horror|Attion|DramaDoocumentary|Science Fiction|Crime|Fantasy|Thriller|Animation|Adventure|Mystery|War|Romance|Music|Family|Western|History|TV Movie|Foreign"
df <- df%>%mutate(mainGenre = str_extract(genres,genre_matching),
PartOfCollection=stri_extract(belongs_to_collection, regex = "(?<=name\\'\\:\\s\\').+(?=\\'\\,\\s\\'poster)"),
collectionTF = case_when(is.na(PartOfCollection)==TRUE~'No Collection',
T~'Collection'),
castSize = str_count(cast, 'name'),
castFemale = str_count(cast, 'gender\'\\:\\s1'),
castMale = str_count(cast, 'gender\'\\:\\s2'),
crewSize = str_count(crew, 'name'),
crewFemale = str_count(crew, 'gender\'\\:\\s1'),
crewMale = str_count(crew, 'gender\'\\:\\s2'),
percentFemale = castFemale/castSize,
#directorGender = str_count(crew, 'Direction\\,\\gender\'\\:\\s2')
countGenres = str_count(genres,'name'),
prodCompCount = str_count(production_companies,'name'),
prodCountriesCount = str_count(production_countries,'name'),
release_date2 = as.date(release_date),
release_year = year(release_date2)
)
require(stringi)
require(lubridate)
genre_matching = "Comedy|Horror|Attion|DramaDoocumentary|Science Fiction|Crime|Fantasy|Thriller|Animation|Adventure|Mystery|War|Romance|Music|Family|Western|History|TV Movie|Foreign"
df <- df%>%mutate(mainGenre = str_extract(genres,genre_matching),
PartOfCollection=stri_extract(belongs_to_collection, regex = "(?<=name\\'\\:\\s\\').+(?=\\'\\,\\s\\'poster)"),
collectionTF = case_when(is.na(PartOfCollection)==TRUE~'No Collection',
T~'Collection'),
castSize = str_count(cast, 'name'),
castFemale = str_count(cast, 'gender\'\\:\\s1'),
castMale = str_count(cast, 'gender\'\\:\\s2'),
crewSize = str_count(crew, 'name'),
crewFemale = str_count(crew, 'gender\'\\:\\s1'),
crewMale = str_count(crew, 'gender\'\\:\\s2'),
percentFemale = castFemale/castSize,
#directorGender = str_count(crew, 'Direction\\,\\gender\'\\:\\s2')
countGenres = str_count(genres,'name'),
prodCompCount = str_count(production_companies,'name'),
prodCountriesCount = str_count(production_countries,'name'),
release_date2 = as_date(release_date),
release_year = year(release_date2)
)
df%>%group_by(mainGenre)%>%summarise(count=n(),gross=round(mean(revenue,na.rm=T),0))%>%
ggplot(aes(x=mainGenre,y=count,fill=gross))+
geom_bar(stat='Identity')+coord_flip()
df%>%#filter(collectionTF == 'Collection')%>%
group_by(collectionTF)%>%summarise(gross = mean(revenue),count=n())%>%
ggplot(aes(x=collectionTF,y=gross,fill=count))+
geom_bar(stat='Identity')
with(df,plot(percentFemale,revenue))
head(df)
df$release_year
df$release_date
df$release_date2
as.POSIXct(df$release_date)
as.Date(df$release_date)
as_date(df$release_date,format='%d/%m/%y')
as_date(df$release_date,format='%d/%m/%y',tz="UTC")
require(stringi)
require(lubridate)
genre_matching = "Comedy|Horror|Attion|DramaDoocumentary|Science Fiction|Crime|Fantasy|Thriller|Animation|Adventure|Mystery|War|Romance|Music|Family|Western|History|TV Movie|Foreign"
df <- df%>%mutate(mainGenre = str_extract(genres,genre_matching),
PartOfCollection=stri_extract(belongs_to_collection, regex = "(?<=name\\'\\:\\s\\').+(?=\\'\\,\\s\\'poster)"),
collectionTF = case_when(is.na(PartOfCollection)==TRUE~'No Collection',
T~'Collection'),
castSize = str_count(cast, 'name'),
castFemale = str_count(cast, 'gender\'\\:\\s1'),
castMale = str_count(cast, 'gender\'\\:\\s2'),
crewSize = str_count(crew, 'name'),
crewFemale = str_count(crew, 'gender\'\\:\\s1'),
crewMale = str_count(crew, 'gender\'\\:\\s2'),
percentFemale = castFemale/castSize,
#directorGender = str_count(crew, 'Direction\\,\\gender\'\\:\\s2')
countGenres = str_count(genres,'name'),
prodCompCount = str_count(production_companies,'name'),
prodCountriesCount = str_count(production_countries,'name'),
release_date2 = as_date(release_date,format='%d/%m/%y',tz="UTC"),
release_year = yeas.POSIXctar(release_date2)
)
require(stringi)
require(lubridate)
genre_matching = "Comedy|Horror|Attion|DramaDoocumentary|Science Fiction|Crime|Fantasy|Thriller|Animation|Adventure|Mystery|War|Romance|Music|Family|Western|History|TV Movie|Foreign"
df <- df%>%mutate(mainGenre = str_extract(genres,genre_matching),
PartOfCollection=stri_extract(belongs_to_collection, regex = "(?<=name\\'\\:\\s\\').+(?=\\'\\,\\s\\'poster)"),
collectionTF = case_when(is.na(PartOfCollection)==TRUE~'No Collection',
T~'Collection'),
castSize = str_count(cast, 'name'),
castFemale = str_count(cast, 'gender\'\\:\\s1'),
castMale = str_count(cast, 'gender\'\\:\\s2'),
crewSize = str_count(crew, 'name'),
crewFemale = str_count(crew, 'gender\'\\:\\s1'),
crewMale = str_count(crew, 'gender\'\\:\\s2'),
percentFemale = castFemale/castSize,
#directorGender = str_count(crew, 'Direction\\,\\gender\'\\:\\s2')
countGenres = str_count(genres,'name'),
prodCompCount = str_count(production_companies,'name'),
prodCountriesCount = str_count(production_countries,'name'),
release_date2 = as_date(release_date,format='%d/%m/%y',tz="UTC"),
release_year = year(release_date2)
)
df%>%group_by(mainGenre)%>%summarise(count=n(),gross=round(mean(revenue,na.rm=T),0))%>%
ggplot(aes(x=mainGenre,y=count,fill=gross))+
geom_bar(stat='Identity')+coord_flip()
df%>%#filter(collectionTF == 'Collection')%>%
group_by(collectionTF)%>%summarise(gross = mean(revenue),count=n())%>%
ggplot(aes(x=collectionTF,y=gross,fill=count))+
geom_bar(stat='Identity')
with(df,plot(percentFemale,revenue))
View(df)
require(stringi)
require(lubridate)
genre_matching = "Comedy|Horror|Attion|DramaDoocumentary|Science Fiction|Crime|Fantasy|Thriller|Animation|Adventure|Mystery|War|Romance|Music|Family|Western|History|TV Movie|Foreign"
df <- df%>%mutate(mainGenre = str_extract(genres,genre_matching),
PartOfCollection=stri_extract(belongs_to_collection, regex = "(?<=name\\'\\:\\s\\').+(?=\\'\\,\\s\\'poster)"),
collectionTF = case_when(is.na(PartOfCollection)==TRUE~'No Collection',
T~'Collection'),
castSize = str_count(cast, 'name'),
castFemale = str_count(cast, 'gender\'\\:\\s1'),
castMale = str_count(cast, 'gender\'\\:\\s2'),
crewSize = str_count(crew, 'name'),
crewFemale = str_count(crew, 'gender\'\\:\\s1'),
crewMale = str_count(crew, 'gender\'\\:\\s2'),
percentFemale = castFemale/castSize,
#directorGender = str_count(crew, 'Direction\\,\\gender\'\\:\\s2')
countGenres = str_count(genres,'name'),
prodCompCount = str_count(production_companies,'name'),
prodCountriesCount = str_count(production_countries,'name'),
release_date2 = as_date(release_date,format='%m/%d/%y',tz="UTC"),
release_year = year(release_date2)
)
df%>%group_by(mainGenre)%>%summarise(count=n(),gross=round(mean(revenue,na.rm=T),0))%>%
ggplot(aes(x=mainGenre,y=count,fill=gross))+
geom_bar(stat='Identity')+coord_flip()
df%>%#filter(collectionTF == 'Collection')%>%
group_by(collectionTF)%>%summarise(gross = mean(revenue),count=n())%>%
ggplot(aes(x=collectionTF,y=gross,fill=count))+
geom_bar(stat='Identity')
with(df,plot(percentFemale,revenue))
fml =
fit <- glm(revenue~budget+castSize+release_year,data=df)
fit <- glm(revenue~budget+castSize+release_year,data=df)
summary(fit)
plot(fit)
View(df)
summary(fit)
require(party)
q()
getwd()
setwd(dir = "C:/")
install.packages("rtweet")
setwd("C:/Users/dwl37/OneDrive - Drexel University/Personal/DataJawn")
setwd("C:\Users\dwl37\OneDrive - Drexel University\Personal\DataJawn")
setwd("C:/Users/dwl37/OneDrive - drexel.edu/Personal/DataJawn/")
rt <- parse_stream("datajawn_during.json")
library(rtweet)
rt <- parse_stream("datajawn_during.json")
setwd("C:/Users/dwl37/Desktop")
require(tidyverse)
df <- read_file("purchases.txt",",")
df <- read_file("purchases.txt")
df <- read_csv("purchases.txt")
View(df)
summary(df)
str(df)
prod_id <- df%>%select('product_id')%>%untique
prod_id <- df%>%select('product_id')%>%unique
prod_id <- df%>%select('product_id')%>%group_by(product_id)%>%summarise(count=n(),avg_cost=mean(price))
prod_id <- df%>%%>%group_by(product_id)%>%summarise(count=n(),avg_cost=mean(price))
prod_id <- df%>%group_by(product_id)%>%summarise(count=n(),avg_cost=mean(price))
View(prod_id)
prod_id <- df%>%
group_by(product_id,customer_id)%>%
summarise(count=n(),avg_cost=mean(price))
View(prod_id)
df%>%left_join(df,by=purchase_id)
df%>%left_join(df,by='purchase_id')
df2 <- df%>%left_join(df,by='purchase_id')
pair_df <- df%>%left_join(df,by='purchase_id')
read(left_join())
left_join??
??left_join
pair_df <- df%>%left_join(df,by='purchase_id',suffix=c("first","Second"))
pair_df <- df%>%left_join(df,by='purchase_id',suffix=c("_first","_second"))%>%filter(product_id_first <> priduct_id_second)
pair_df <- df%>%left_join(df,by='purchase_id',suffix=c("_first","_second"))%>%filter(product_id_first <> product_id_second)
pair_df <- df%>%left_join(df,by='purchase_id',suffix=c("_first","_second"))%>%filter(product_id_first != product_id_second)
agg_pair_df <- pair_df%>%group_by(product_id_first,product_id_second)%>%summarise(count=n())
View(agg_pair_df)
agg_pair_df <- pair_df%>%group_by(product_id_first,product_id_second)%>%summarise(count=n())%>%arrange(count,'desc')
agg_pair_df <- pair_df%>%group_by(product_id_first,product_id_second)%>%summarise(count=n())%>%arrange(count)
View(agg_pair_df)
??arrange
agg_pair_df <- pair_df%>%group_by(product_id_first,product_id_second)%>%summarise(count=n())%>%arrange(product_id_first,desc(count))
View(agg_pair_df)
df%>%head(10)
prodoct_function <- function(prod_id,n) {
df%>%
left_join(df,by='purchase_id',suffix=c("_first","_second"))%>%
filter(product_id_first != product_id_second)%>%
group_by(product_id_first,product_id_second)%>%
summarise(count=n())%>%
arrange(product_id_first,desc(count))%>%
filter(product_id_first == prod_id)%>%head(n)
}
prodoct_function('BM7773',5)
prodoct_function <- function(df_input,prod_id,n) {
df_input%>%
left_join(df,by='purchase_id',suffix=c("_first","_second"))%>%
filter(product_id_first != product_id_second)%>%
group_by(product_id_first,product_id_second)%>%
summarise(count=n())%>%
arrange(product_id_first,desc(count))%>%
filter(product_id_first == prod_id)%>%head(n)
}
prodoct_function(df,'BM7773',5)
require(tidyverse)
require(tidyverse)
dfTrain <- read_csv("tmdb-box-office-prediction/train.csv")
dfTrain$set <- "Train"
dftest <- read_csv("tmdb-box-office-prediction/test.csv")
dftest$set <- "test"
df <- df(dfTrain,dftests)
require(tidyverse)
dfTrain <- read_csv("tmdb-box-office-prediction/train.csv")
dfTrain$set <- "Train"
dftest <- read_csv("tmdb-box-office-prediction/test.csv")
dftest$set <- "test"
df <- df(dfTrain,dftest)
View(dfTrain)
dftest$revenue <- NULL
df <- df(dfTrain,dftest)
require(tidyverse)
dfTrain <- read_csv("tmdb-box-office-prediction/train.csv")
dfTrain$set <- "Train"
dftest <- read_csv("tmdb-box-office-prediction/test.csv")
dftest$set <- "test"
#dftest$revenue <- NULL
df <- rbind(dfTrain,dftest)
require(tidyverse)
dfTrain <- read_csv("tmdb-box-office-prediction/train.csv")
dfTrain$set <- "Train"
dftest <- read_csv("tmdb-box-office-prediction/test.csv")
dftest$set <- "test"
dftest$revenue <- NULL
df <- rbind(dfTrain,dftest)
dftest$revenue <- NULL
require(tidyverse)
dfTrain <- read_csv("tmdb-box-office-prediction/train.csv")
dfTrain$set <- "Train"
dftest <- read_csv("tmdb-box-office-prediction/test.csv")
dftest$revenue <- NULL
dftest$set <- "test"
df <- rbind(dfTrain,dftest)
require(tidyverse)
dfTrain <- read_csv("tmdb-box-office-prediction/train.csv")
dfTrain$set <- "Train"
dftest <- read_csv("tmdb-box-office-prediction/test.csv")
dftest$revenue <- " "
dftest$set <- "test"
df <- rbind(dfTrain,dftest)
summary(df)
glimps(df)
glimpse(df)
require(stringi)
require(lubridate)
genre_matching = "Comedy|Horror|Attion|DramaDoocumentary|Science Fiction|Crime|Fantasy|Thriller|Animation|Adventure|Mystery|War|Romance|Music|Family|Western|History|TV Movie|Foreign"
df <- df%>%mutate(mainGenre = str_extract(genres,genre_matching),
PartOfCollection=stri_extract(belongs_to_collection, regex = "(?<=name\\'\\:\\s\\').+(?=\\'\\,\\s\\'poster)"),
collectionTF = case_when(is.na(PartOfCollection)==TRUE~'No Collection',
T~'Collection'),
castSize = str_count(cast, 'name'),
castFemale = str_count(cast, 'gender\'\\:\\s1'),
castMale = str_count(cast, 'gender\'\\:\\s2'),
crewSize = str_count(crew, 'name'),
crewFemale = str_count(crew, 'gender\'\\:\\s1'),
crewMale = str_count(crew, 'gender\'\\:\\s2'),
percentFemale = castFemale/castSize,
#directorGender = str_count(crew, 'Direction\\,\\gender\'\\:\\s2')
countGenres = str_count(genres,'name'),
prodCompCount = str_count(production_companies,'name'),
prodCountriesCount = str_count(production_countries,'name'),
languagesSpoken = str_count(spoken_languages,'name'),
english = str_detect(spoken_languages,'english'),
release_date2 = as_date(release_date,format='%m/%d/%y',tz="UTC"),
release_year = year(release_date2),
release_month = month(release_date2)
)
require(stringi)
require(lubridate)
genre_matching = "Comedy|Horror|Attion|DramaDoocumentary|Science Fiction|Crime|Fantasy|Thriller|Animation|Adventure|Mystery|War|Romance|Music|Family|Western|History|TV Movie|Foreign"
df <- df%>%mutate(mainGenre = str_extract(genres,genre_matching),
PartOfCollection=stri_extract(belongs_to_collection, regex = "(?<=name\\'\\:\\s\\').+(?=\\'\\,\\s\\'poster)"),
collectionTF = case_when(is.na(PartOfCollection)==TRUE~'No Collection',
T~'Collection'),
castSize = str_count(cast, 'name'),
castFemale = str_count(cast, 'gender\'\\:\\s1'),
castMale = str_count(cast, 'gender\'\\:\\s2'),
crewSize = str_count(crew, 'name'),
crewFemale = str_count(crew, 'gender\'\\:\\s1'),
crewMale = str_count(crew, 'gender\'\\:\\s2'),
percentFemale = castFemale/castSize,
#directorGender = str_count(crew, 'Direction\\,\\gender\'\\:\\s2')
countGenres = str_count(genres,'name'),
prodCompCount = str_count(production_companies,'name'),
prodCountriesCount = str_count(production_countries,'name'),
languagesSpoken = str_count(spoken_languages,'name'),
english = str_detect(spoken_languages,'English'),
release_date2 = as_date(release_date,format='%m/%d/%y',tz="UTC"),
release_year = year(release_date2),
release_month = month(release_date2)
)
test = df%>%select(set=='test')
test = df%>%filter(set=='Test')
test = df%>%filter(set=='test')
